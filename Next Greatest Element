#include <bits/stdc++.h>
using namespace std;

void NGE(vector<int> &v, vector<int> &nge){
    int n = v.size();
    stack<int> st;
    
    for(int i=0; i<n; ++i){
        while(!st.empty() && v[i]>v[st.top()]){   //since stack is storing indices so we access element through index
            nge[st.top()] = v[i];
            st.pop();
        }
        st.push(i);   //elements can be accesed through indices later as they're unique
    }
    
    while(!st.empty()){
        nge[st.top()] = -1;
        st.pop();
    }
    //return nge; to avoid extra computation and memory power, pass by referance(hence, return-type void)
}
    
    //for circular array
    vector<int> nextGreaterElements(vector<int>& nums) {
        int n = nums.size();
        //copy and add array nums to array nums for circular element
        for(int i=0; i<n; i++){
            nums.push_back(nums[i]);
        }
        //perform NGE on this modified array nums
        vector<int> nge(2*n);
        stack<int> st;
        for(int i=0; i<2*n; i++){
            while(!st.empty() && nums[i]>nums[st.top()]){
                nge[st.top()] = nums[i];
                st.pop();
            }
            st.push(i); //elements can be stored through their indices later as they are unique
        }

        while(!st.empty()){
            nge[st.top()] = -1;
            st.pop();
        }

        vector<int> circ;
        for(int i=0; i<n; i++){
            circ.push_back(nge[i]);
        }
        return circ;
    }
    
int main() {
    int n;
    cin >> n;
    vector<int> v(n);
    vector<int> nge(n);
    for(int i=0; i<n; i++){
        cin >> v[i];
    }
    NGE(v, nge);
    for(int i=0; i<n; i++){
        cout << v[i] << " " << nge[i] << endl;   
    }
}
